// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: create.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO
	admin (first_name, last_name, email, superuser)
VALUES
	(?, ?, ?, ?)
RETURNING
	id, first_name, last_name, email, superuser, created_at, updated_at
`

type CreateAdminParams struct {
	FirstName string
	LastName  string
	Email     string
	Superuser int64
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Superuser,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Superuser,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCredential = `-- name: CreateCredential :exec
INSERT INTO
	credential (admin_id, password_hash)
VALUES
	(?, ?)
`

type CreateCredentialParams struct {
	AdminID      string
	PasswordHash []byte
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) error {
	_, err := q.db.ExecContext(ctx, createCredential, arg.AdminID, arg.PasswordHash)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO
	session (id, admin_id, expiry)
VALUES
	(?, ?, ?)
`

type CreateSessionParams struct {
	ID      string
	AdminID string
	Expiry  int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.ID, arg.AdminID, arg.Expiry)
	return err
}
